from github import Github
from rich.progress import track
from rich import print
import typer
import pandas as pd
import re
import os
from jinja2 import Environment, FileSystemLoader
from utils import render_content, get_config, set_config, update_issue

app = typer.Typer()


@app.command()
def set_token(token: str | None = None, config_path="~/.issue-tools/config"):
    from rich.prompt import Prompt

    if token is None:
        token = Prompt.ask("请输入token")
    set_config({"token": token}, config_path)
    return token


@app.command()
def get_token(config_path="~/.issue-tools/config"):
    token = get_config(config_path).get("token", None)
    if token is None:
        print("No existed token.")
        return
    print(f"Token: {token}")
    return token


@app.command()
def update(
    template_path: str,
    data_path: str,
    issue_id:int,
    footer: str = "Generated by IssueTools",
    config_path="~/.issue-tools/config",
):
    token = get_token(config_path=config_path)
    if token is None:
        token = set_token(config_path=config_path)
    g = Github(token)
    repo = g.get_repo("PFCCLab/paddlefx")
    tracking_issue = repo.get_issue(issue_id)
    comments = tracking_issue.get_comments()
    # TODO: template_path and data_path
    body = render_content(template_path, data_path, comments, footer)
    update_issue(tracking_issue, body)
    print("update github issue successful")

@app.command()
def create(
    template_path: str,
    data_path: str,
    footer: str = "Generated by IssueTools",
    config_path="~/.issue-tools/config",
):
    token = get_token(config_path=config_path)
    if token is None:
        token = set_token(config_path=config_path)
    g = Github(token)
    repo = g.get_repo("PFCCLab/paddlefx")
    for i in range(1, 8):
        chinese_digit = {
            1: "一",
            2: "二",
            3: "三",
            4: "四",
            5: "五",
            6: "六",
            7: "七",
            8: "八",
            9: "九",
        }
        task_title = {
            1: "添加更多字节码指令的转换。",
            2: "优化 call_function 等一些已经实现的字节码指令的转换。",
            3: "实现类似 VariableTracker 的机制。",
            4: "增强 Python 代码生成的高效性和可读性。",
            5: "实现 ONNX RUNTIME，TensorRT 等后端并运行推理。",
            6: "实现 replace_pattern API 以及优化 Pass（进阶任务）。",
            7: "增加更多测试文件，转换更多网络（进阶任务）。",
            8: "添加文档（进阶任务）。",
        }
        repo.create_issue(f"任务{chinese_digit[i]}：{task_title[i]}")
    print("create github issue successful")


if __name__ == "__main__":
    app()
    
