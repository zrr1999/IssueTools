from github import Github
from github.IssueComment import IssueComment
from github.Issue import Issue
from rich.progress import track
from rich import print
import pandas as pd
import re
import toml
from jinja2 import Environment, FileSystemLoader
from typing import Iterable


def set_config(data:dict, path:str="~/.issue-tools/config"):
    import os 
    path = os.path.expanduser(path)
    if not os.path.exists(path):
        os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, 'w') as f:
        toml.dump(data, f)


def get_config(path="~/.issue-tools/config")->dict:
    import os 
    path = os.path.expanduser(path)
    if not os.path.exists(path):
        return {}
    with open(path, 'r') as f:
        return toml.load(f)


def render_content(
    template_path:str, 
    data_path:str, 
    comments: Iterable[IssueComment],
    footer:str="Generated by IssueTools"
)->str:
    df = pd.read_csv(data_path, index_col=0)
    df = df.fillna("")
    
    for c in comments:
        data = re.compile(r"【(\S*)】：(\S*)").findall(c.body)
        author = c.user.login
        n, state, pr = 0, 0, None
        for k, v in data:
            if k == "序号":
                try:
                    n = int(v)
                except:  # noqa: E722
                    pass
            elif k == "状态":
                if "认领" in v:
                    state = 1
                elif "提交" in v:
                    state = 2
        if n > 0:
            if state == 1:
                if not df.loc[n, "认领人"]:
                    df.loc[n, "认领人"] = author
                else:
                    df.loc[n, "认领人"] = f'{df.loc[n, "认领人"]}, {author}'
            elif state == 2 and pr is not None:
                # TODO: add df.loc[n, "认领人"]
                if not df.loc[n, "PR"]:
                    df.loc[n, "PR"] = pr
                
    env = Environment(loader=FileSystemLoader('./'))
    template = env.get_template(template_path)
    body = f"{template.render(work1=df.to_markdown())}\n\n{footer}"
    return body
    

def update_issue(
    issue:Issue, 
    body:str, 
)->bool:
    if body == issue.body:
        return False
    else:
        issue.edit(body=body)
        return True
